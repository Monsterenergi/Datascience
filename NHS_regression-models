{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"NHS_regression-models","provenance":[{"file_id":"1mM1Xyp5yweNWori-PGAzmTrMyfuDKjhB","timestamp":1653494778602},{"file_id":"1KgsqhW09Ir93_ofoeuE89U0EGYJ759QY","timestamp":1653487591741}],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"r3cas2_1T98w"},"source":["# Decision Tree Regression"]},{"cell_type":"markdown","metadata":{"id":"IODliia6U1xO"},"source":["## Importing the libraries"]},{"cell_type":"code","metadata":{"id":"y98nA5UdU6Hf","executionInfo":{"status":"ok","timestamp":1653498355983,"user_tz":-60,"elapsed":262,"user":{"displayName":"Mujib Miah","userId":"10990234301456496269"}}},"source":["import numpy as np\n","import matplotlib.pyplot as plt\n","import pandas as pd"],"execution_count":76,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"jpjZ43YlU8eI"},"source":["## Importing the dataset"]},{"cell_type":"code","metadata":{"id":"pLVaXoYVU_Uy","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1653498356249,"user_tz":-60,"elapsed":14,"user":{"displayName":"Mujib Miah","userId":"10990234301456496269"}},"outputId":"85d91f33-ecb7-4c05-9556-939ecca54f77"},"source":["dataset = pd.read_csv('data.csv')\n","X = dataset.iloc[:, 4].values\n","z = dataset.iloc[:, 7].values\n","y=(z/X)*100\n","\n","\n","#replacing all the null values with the mean in the y variable (percentage)\n","X=X.reshape(-1,1)\n","from sklearn.impute import SimpleImputer \n","imputer=SimpleImputer(missing_values=np.nan, strategy='mean' )\n","imputer.fit(X[:]) #in this range we are trying to exclude all strings as this can lead to error \n","X[:]=imputer.transform(X[:]) \n","\n","\n","\n","y=y.reshape(-1,1)\n","from sklearn.impute import SimpleImputer \n","imputer=SimpleImputer(missing_values=np.nan, strategy='mean' )\n","imputer.fit(y[:]) #in this range we are trying to exclude all strings as this can lead to error \n","y[:]=imputer.transform(y[:]) \n"],"execution_count":77,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:4: RuntimeWarning: invalid value encountered in true_divide\n","  after removing the cwd from sys.path.\n"]}]},{"cell_type":"code","source":[""],"metadata":{"id":"oJWHoYjFAJeE","executionInfo":{"status":"ok","timestamp":1653498356250,"user_tz":-60,"elapsed":13,"user":{"displayName":"Mujib Miah","userId":"10990234301456496269"}}},"execution_count":77,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"asq6r16HBYJE"},"source":["## Training the Simple Linear Regression model on the Training set"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"outputId":"23d39a86-fa06-4f6f-eaf9-82fde2948a3e","executionInfo":{"status":"ok","timestamp":1653498356250,"user_tz":-60,"elapsed":12,"user":{"displayName":"Mujib Miah","userId":"10990234301456496269"}},"id":"JXkDpzEvBYJS"},"source":["from sklearn.linear_model import LinearRegression\n","regressor = LinearRegression()\n","regressor.fit(X_train, y_train) #fit method trains the dataset\n","#now can start to train the dataset \n"],"execution_count":78,"outputs":[{"output_type":"execute_result","data":{"text/plain":["LinearRegression()"]},"metadata":{},"execution_count":78}]},{"cell_type":"markdown","metadata":{"id":"1EoH50KHBYJT"},"source":["## Predicting the Test set results"]},{"cell_type":"code","metadata":{"executionInfo":{"status":"ok","timestamp":1653498356533,"user_tz":-60,"elapsed":292,"user":{"displayName":"Mujib Miah","userId":"10990234301456496269"}},"id":"0kBsuSQvBYJT"},"source":["y_pred = regressor.predict(X_test)"],"execution_count":79,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"lm38EMl9BYJT"},"source":["## Visualising the Training set results"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":295},"outputId":"4186bd54-49f8-4c7c-e46f-780a0e4c8bf4","executionInfo":{"status":"ok","timestamp":1653498356763,"user_tz":-60,"elapsed":241,"user":{"displayName":"Mujib Miah","userId":"10990234301456496269"}},"id":"I4yLVsIvBYJT"},"source":["plt.scatter(X_train, y_train, color = 'red')\n","plt.plot(X_train, regressor.predict(X_train), color = 'blue')\n","plt.title('Percentage against cases')\n","plt.xlabel('Cases')\n","plt.ylabel('Percentage')\n","plt.show()"],"execution_count":80,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"SyJVTMiXBYJU"},"source":["## Visualising the Test set results"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":295},"outputId":"27413e20-ab9a-4e5f-e5ed-5c6393810786","executionInfo":{"status":"ok","timestamp":1653498357372,"user_tz":-60,"elapsed":615,"user":{"displayName":"Mujib Miah","userId":"10990234301456496269"}},"id":"CynzUzreBYJU"},"source":["plt.scatter(X_test, y_test, color = 'red')\n","plt.plot(X_train, regressor.predict(X_train), color = 'blue') #why is this exactly the same as the training set?\n","plt.title('Percentage against cases')\n","plt.xlabel('Cases')\n","plt.ylabel('Percentage')\n","plt.show()\n","#Appears that percentage is unrelated to the number of visits roughly equal points above and below. "],"execution_count":81,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"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\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"tPJXMyyUJbWn"},"source":["## Splitting the dataset into the Training set and Test set"]},{"cell_type":"code","metadata":{"id":"rFOzpjaiJd5B","executionInfo":{"status":"ok","timestamp":1653498357373,"user_tz":-60,"elapsed":19,"user":{"displayName":"Mujib Miah","userId":"10990234301456496269"}}},"source":["from sklearn.model_selection import train_test_split\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0) #splitting the data set"],"execution_count":82,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"g16qFkFQVC35"},"source":["## Training the Decision Tree Regression model on the Training set"]},{"cell_type":"code","metadata":{"id":"SLDKyv1SVUqS","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1653498357374,"user_tz":-60,"elapsed":18,"user":{"displayName":"Mujib Miah","userId":"10990234301456496269"}},"outputId":"3485e88a-ab07-41eb-8a9c-d677a5bd1f63"},"source":["from sklearn.tree import DecisionTreeRegressor\n","regressor = DecisionTreeRegressor(random_state = 0)\n","regressor.fit(X_train, y_train)"],"execution_count":83,"outputs":[{"output_type":"execute_result","data":{"text/plain":["DecisionTreeRegressor(random_state=0)"]},"metadata":{},"execution_count":83}]},{"cell_type":"markdown","metadata":{"id":"Nao9cdO6IgNb"},"source":["## Predicting the Test set results"]},{"cell_type":"code","metadata":{"id":"EebHA3EOIkQK","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1653498357375,"user_tz":-60,"elapsed":15,"user":{"displayName":"Mujib Miah","userId":"10990234301456496269"}},"outputId":"b6163b39-ff72-4254-ab89-132311444512"},"source":["y_pred = regressor.predict(X_test)\n","np.set_printoptions(precision=2)\n","print(np.concatenate((y_pred.reshape(len(y_pred),1), y_test.reshape(len(y_test),1)),1))"],"execution_count":84,"outputs":[{"output_type":"stream","name":"stdout","text":["[[20.02 20.02]\n"," [20.02 20.02]\n"," [29.82 30.38]\n"," [12.76 28.5 ]\n"," [13.37 22.25]\n"," [19.47 18.13]\n"," [30.79 13.03]\n"," [12.76 19.5 ]\n"," [ 8.6  14.05]\n"," [14.86 27.35]\n"," [32.98  9.56]\n"," [21.91  6.82]\n"," [20.02 20.02]\n"," [41.91  7.33]\n"," [20.02 20.02]\n"," [33.21 23.93]\n"," [20.02 20.02]\n"," [14.11 27.81]\n"," [22.56  7.08]\n"," [20.02 20.02]\n"," [11.86 14.48]\n"," [14.7  12.53]\n"," [28.61  9.05]\n"," [20.02 20.02]\n"," [20.02 20.02]\n"," [ 8.97 15.99]\n"," [22.73 10.47]\n"," [20.02 20.02]\n"," [20.02 20.02]\n"," [14.11  4.65]\n"," [20.02 20.02]\n"," [20.02 20.02]\n"," [20.02 20.02]\n"," [20.02 20.02]\n"," [38.25 32.72]\n"," [24.69 23.42]\n"," [41.91 24.52]\n"," [20.02 20.02]\n"," [11.86 27.06]\n"," [22.02 23.38]\n"," [11.08 12.24]\n"," [20.02 20.02]\n"," [22.02 13.52]\n"," [20.02 20.02]\n"," [20.02 20.02]\n"," [20.02 20.02]\n"," [15.13 20.46]\n"," [14.36  9.76]]\n"]}]},{"cell_type":"markdown","metadata":{"id":"V4nELFnnIod1"},"source":["## Evaluating the Model Performance"]},{"cell_type":"code","metadata":{"id":"_G2QS1UoIsTZ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1653498357378,"user_tz":-60,"elapsed":16,"user":{"displayName":"Mujib Miah","userId":"10990234301456496269"}},"outputId":"5c15e7ba-de58-4279-be62-8af917c920c5"},"source":["from sklearn.metrics import r2_score\n","r2_score(y_test, y_pred)\n","#negative score means not a good model and no correlation"],"execution_count":85,"outputs":[{"output_type":"execute_result","data":{"text/plain":["-1.461869148821187"]},"metadata":{},"execution_count":85}]},{"cell_type":"code","source":[""],"metadata":{"id":"9cuwBlkHhaYz","executionInfo":{"status":"ok","timestamp":1653498357742,"user_tz":-60,"elapsed":376,"user":{"displayName":"Mujib Miah","userId":"10990234301456496269"}}},"execution_count":85,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"k-McZVsQBINc"},"source":["## Training the Multiple Linear Regression model on the Training set"]},{"cell_type":"code","metadata":{"id":"ywPjx0L1BMiD","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1653498357743,"user_tz":-60,"elapsed":33,"user":{"displayName":"Mujib Miah","userId":"10990234301456496269"}},"outputId":"a4406755-fa2a-41f3-9070-f0f6447829b4"},"source":["from sklearn.linear_model import LinearRegression\n","regressor = LinearRegression()\n","regressor.fit(X_train, y_train)"],"execution_count":86,"outputs":[{"output_type":"execute_result","data":{"text/plain":["LinearRegression()"]},"metadata":{},"execution_count":86}]},{"cell_type":"markdown","metadata":{"id":"xNkXL1YQBiBT"},"source":["## Predicting the Test set results"]},{"cell_type":"code","metadata":{"id":"TQKmwvtdBkyb","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1653498357743,"user_tz":-60,"elapsed":32,"user":{"displayName":"Mujib Miah","userId":"10990234301456496269"}},"outputId":"52309573-6191-43da-83b9-8ee1ee8ab547"},"source":["y_pred = regressor.predict(X_test)\n","np.set_printoptions(precision=2)\n","print(np.concatenate((y_pred.reshape(len(y_pred),1), y_test.reshape(len(y_test),1)),1))"],"execution_count":87,"outputs":[{"output_type":"stream","name":"stdout","text":["[[20.38 20.02]\n"," [20.38 20.02]\n"," [20.38 30.38]\n"," [20.39 28.5 ]\n"," [20.39 22.25]\n"," [20.39 18.13]\n"," [20.38 13.03]\n"," [20.39 19.5 ]\n"," [20.38 14.05]\n"," [20.38 27.35]\n"," [20.38  9.56]\n"," [20.39  6.82]\n"," [20.38 20.02]\n"," [20.39  7.33]\n"," [20.38 20.02]\n"," [20.38 23.93]\n"," [20.38 20.02]\n"," [20.38 27.81]\n"," [20.38  7.08]\n"," [20.38 20.02]\n"," [20.38 14.48]\n"," [20.39 12.53]\n"," [20.39  9.05]\n"," [20.38 20.02]\n"," [20.38 20.02]\n"," [20.38 15.99]\n"," [20.38 10.47]\n"," [20.38 20.02]\n"," [20.38 20.02]\n"," [20.38  4.65]\n"," [20.38 20.02]\n"," [20.38 20.02]\n"," [20.38 20.02]\n"," [20.38 20.02]\n"," [20.39 32.72]\n"," [20.38 23.42]\n"," [20.39 24.52]\n"," [20.38 20.02]\n"," [20.38 27.06]\n"," [20.38 23.38]\n"," [20.38 12.24]\n"," [20.38 20.02]\n"," [20.38 13.52]\n"," [20.38 20.02]\n"," [20.38 20.02]\n"," [20.38 20.02]\n"," [20.38 20.46]\n"," [20.38  9.76]]\n"]}]},{"cell_type":"markdown","metadata":{"id":"50DZZy0UyhLi"},"source":["## Evaluating the Model Performance"]},{"cell_type":"code","metadata":{"id":"xPagAOKDywV4","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1653498357744,"user_tz":-60,"elapsed":30,"user":{"displayName":"Mujib Miah","userId":"10990234301456496269"}},"outputId":"43eed8a8-16ab-4f0d-9d9c-6cac15d7e793"},"source":["from sklearn.metrics import r2_score\n","r2_score(y_test, y_pred)\n","\n","#negative value, no real correlation "],"execution_count":88,"outputs":[{"output_type":"execute_result","data":{"text/plain":["-0.08400608936506915"]},"metadata":{},"execution_count":88}]},{"cell_type":"code","source":[""],"metadata":{"id":"qc9E1dsIiFQA","executionInfo":{"status":"ok","timestamp":1653498357745,"user_tz":-60,"elapsed":28,"user":{"displayName":"Mujib Miah","userId":"10990234301456496269"}}},"execution_count":88,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"v4S2fyIBYDcu"},"source":["## Training the Random Forest Regression model on the whole dataset"]},{"cell_type":"code","metadata":{"id":"o8dOCoJ1YKMc","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1653498357746,"user_tz":-60,"elapsed":28,"user":{"displayName":"Mujib Miah","userId":"10990234301456496269"}},"outputId":"de7dac0f-e66c-45f9-b967-e3f591e2d322"},"source":["from sklearn.ensemble import RandomForestRegressor\n","regressor = RandomForestRegressor(n_estimators = 10, random_state = 0)\n","regressor.fit(X_train, y_train)"],"execution_count":89,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:3: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  This is separate from the ipykernel package so we can avoid doing imports until\n"]},{"output_type":"execute_result","data":{"text/plain":["RandomForestRegressor(n_estimators=10, random_state=0)"]},"metadata":{},"execution_count":89}]},{"cell_type":"markdown","metadata":{"id":"DM_jh0frOPKE"},"source":["## Predicting the Test set results"]},{"cell_type":"code","metadata":{"id":"JGa9ZfM4OTNw","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1653498357748,"user_tz":-60,"elapsed":27,"user":{"displayName":"Mujib Miah","userId":"10990234301456496269"}},"outputId":"5b5e9cf5-20c5-44c0-9777-acb4f68ab08c"},"source":["y_pred = regressor.predict(X_test)\n","np.set_printoptions(precision=2)\n","print(np.concatenate((y_pred.reshape(len(y_pred),1), y_test.reshape(len(y_test),1)),1))"],"execution_count":90,"outputs":[{"output_type":"stream","name":"stdout","text":["[[20.02 20.02]\n"," [20.02 20.02]\n"," [31.57 30.38]\n"," [13.86 28.5 ]\n"," [13.74 22.25]\n"," [20.44 18.13]\n"," [29.31 13.03]\n"," [13.86 19.5 ]\n"," [17.19 14.05]\n"," [18.42 27.35]\n"," [29.38  9.56]\n"," [21.52  6.82]\n"," [20.02 20.02]\n"," [29.65  7.33]\n"," [20.02 20.02]\n"," [26.92 23.93]\n"," [20.02 20.02]\n"," [ 6.13 27.81]\n"," [22.66  7.08]\n"," [20.02 20.02]\n"," [13.66 14.48]\n"," [17.67 12.53]\n"," [24.96  9.05]\n"," [20.02 20.02]\n"," [20.02 20.02]\n"," [11.11 15.99]\n"," [21.5  10.47]\n"," [20.02 20.02]\n"," [20.02 20.02]\n"," [ 6.13  4.65]\n"," [20.02 20.02]\n"," [20.02 20.02]\n"," [20.02 20.02]\n"," [20.02 20.02]\n"," [33.35 32.72]\n"," [24.32 23.42]\n"," [29.65 24.52]\n"," [20.02 20.02]\n"," [12.92 27.06]\n"," [23.37 23.38]\n"," [12.19 12.24]\n"," [20.02 20.02]\n"," [23.37 13.52]\n"," [20.02 20.02]\n"," [20.02 20.02]\n"," [20.02 20.02]\n"," [15.81 20.46]\n"," [16.43  9.76]]\n"]}]},{"cell_type":"markdown","metadata":{"id":"Cd8VZM5POWXN"},"source":["## Evaluating the Model Performance"]},{"cell_type":"code","metadata":{"id":"a7y1rXlfOZJo","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1653498357749,"user_tz":-60,"elapsed":25,"user":{"displayName":"Mujib Miah","userId":"10990234301456496269"}},"outputId":"15f22367-955a-424c-c524-1eb2225e275e"},"source":["from sklearn.metrics import r2_score\n","r2_score(y_test, y_pred)"],"execution_count":91,"outputs":[{"output_type":"execute_result","data":{"text/plain":["-0.730093517445082"]},"metadata":{},"execution_count":91}]},{"cell_type":"code","source":[""],"metadata":{"id":"o2ATsdV3iVY3","executionInfo":{"status":"ok","timestamp":1653498357750,"user_tz":-60,"elapsed":22,"user":{"displayName":"Mujib Miah","userId":"10990234301456496269"}}},"execution_count":91,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Rb5nWuSHEfBV"},"source":["## Training the Polynomial Regression model on the Training set"]},{"cell_type":"code","metadata":{"id":"HYplp4pTEm0O","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1653498357750,"user_tz":-60,"elapsed":22,"user":{"displayName":"Mujib Miah","userId":"10990234301456496269"}},"outputId":"7121873d-472f-495f-af66-ae0e6d8b05d1"},"source":["from sklearn.preprocessing import PolynomialFeatures\n","from sklearn.linear_model import LinearRegression\n","poly_reg = PolynomialFeatures(degree = 4)\n","X_poly = poly_reg.fit_transform(X_train)\n","regressor = LinearRegression()\n","regressor.fit(X_poly, y_train)"],"execution_count":92,"outputs":[{"output_type":"execute_result","data":{"text/plain":["LinearRegression()"]},"metadata":{},"execution_count":92}]},{"cell_type":"markdown","metadata":{"id":"pzF3BRps9nlk"},"source":["## Predicting the Test set results"]},{"cell_type":"code","metadata":{"id":"36aFLFBK9pMk","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1653498357751,"user_tz":-60,"elapsed":19,"user":{"displayName":"Mujib Miah","userId":"10990234301456496269"}},"outputId":"af0998be-ae0f-493d-8c51-c57787ed411f"},"source":["y_pred = regressor.predict(poly_reg.transform(X_test))\n","np.set_printoptions(precision=2)\n","print(np.concatenate((y_pred.reshape(len(y_pred),1), y_test.reshape(len(y_test),1)),1))"],"execution_count":93,"outputs":[{"output_type":"stream","name":"stdout","text":["[[20.08 20.02]\n"," [20.08 20.02]\n"," [20.33 30.38]\n"," [22.57 28.5 ]\n"," [20.68 22.25]\n"," [20.4  18.13]\n"," [20.18 13.03]\n"," [22.7  19.5 ]\n"," [20.16 14.05]\n"," [20.17 27.35]\n"," [20.16  9.56]\n"," [22.05  6.82]\n"," [20.08 20.02]\n"," [20.46  7.33]\n"," [20.08 20.02]\n"," [20.28 23.93]\n"," [20.08 20.02]\n"," [20.12 27.81]\n"," [20.28  7.08]\n"," [20.08 20.02]\n"," [20.32 14.48]\n"," [20.55 12.53]\n"," [20.39  9.05]\n"," [20.08 20.02]\n"," [20.08 20.02]\n"," [20.14 15.99]\n"," [20.1  10.47]\n"," [20.08 20.02]\n"," [20.08 20.02]\n"," [20.12  4.65]\n"," [20.08 20.02]\n"," [20.08 20.02]\n"," [20.08 20.02]\n"," [20.08 20.02]\n"," [21.35 32.72]\n"," [20.18 23.42]\n"," [20.45 24.52]\n"," [20.08 20.02]\n"," [20.32 27.06]\n"," [20.15 23.38]\n"," [20.24 12.24]\n"," [20.08 20.02]\n"," [20.15 13.52]\n"," [20.08 20.02]\n"," [20.08 20.02]\n"," [20.08 20.02]\n"," [20.23 20.46]\n"," [20.22  9.76]]\n"]}]},{"cell_type":"markdown","metadata":{"id":"Fz1uTlWV919-"},"source":["## Evaluating the Model Performance"]},{"cell_type":"code","metadata":{"id":"xvZQ_4W893-e","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1653498357998,"user_tz":-60,"elapsed":263,"user":{"displayName":"Mujib Miah","userId":"10990234301456496269"}},"outputId":"5eeaefa0-f5d4-4da6-c4bb-f67f08c3d07b"},"source":["from sklearn.metrics import r2_score\n","r2_score(y_test, y_pred)"],"execution_count":94,"outputs":[{"output_type":"execute_result","data":{"text/plain":["-0.07269610722241082"]},"metadata":{},"execution_count":94}]},{"cell_type":"markdown","source":["Wanted to check that the items might follow some regression from different models. The models with the worst performance was decision and random forest. Dectision tree -1.46, random forest -0.73, multiple linear -0.084, polynomial -0.073.\n","The best model was polynomial with the least neagtive valuye of, however still negative so no correlation. \n","Need to explore other potential relations between different variables. "],"metadata":{"id":"C11pk0jpB95p"}}]}